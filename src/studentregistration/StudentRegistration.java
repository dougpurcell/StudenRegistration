package studentregistration;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */ 

/**
 *
 * @author dls102
 */
public class StudentRegistration extends javax.swing.JFrame {

    Database db = new Database();
    List<StudentRecord> studentList = new LinkedList();
    
    private StudentManager manager = new StudentManager(this);
    
    public StudentRegistration() {
        initComponents();
        display.setLineWrap(true);  
        db.create();
        
        //get contents of xml file and load list
        readFile("Students.xml");
        
        for (int i = 0; i < studentList.size(); i++) {
            StudentRecord tempNode = studentList.get(i);
            db.addStudent(tempNode);
        }
        
        // display data in the text area
        displayData();
        
//        // store student data in the database
//        storeData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        promptLabel = new javax.swing.JLabel();
        readButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        degreeStatus = new javax.swing.JTextField();
        studentMajor = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        promptLabel.setText("Filename:");

        readButton.setText("Read from XML File");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        nameField.setText("Students.xml");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        firstName.setText("firstName");
        firstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameActionPerformed(evt);
            }
        });

        lastName.setText("lastName");
        lastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameActionPerformed(evt);
            }
        });

        degreeStatus.setText("degreeStatus");
        degreeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeStatusActionPerformed(evt);
            }
        });

        studentMajor.setText("studentMajor");
        studentMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentMajorActionPerformed(evt);
            }
        });

        addButton.setText("Add Record");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Record");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(promptLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(readButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(degreeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteButton)
                            .addComponent(studentMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promptLabel)
                    .addComponent(readButton)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(degreeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(deleteButton))))
                .addContainerGap(197, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
 
    }//GEN-LAST:event_readButtonActionPerformed

    private void firstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameActionPerformed

    private void lastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameActionPerformed

    private void degreeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_degreeStatusActionPerformed

    private void studentMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentMajorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentMajorActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        String fname = firstName.getText();
        String lname = lastName.getText();
        String degree = degreeStatus.getText();
        String major = studentMajor.getText();
        
        StudentRecord removeStudent = new StudentRecord(fname, lname, degree, major);
        
        manager.removeItem(fname, lname, degree, major);
        db.deleteStudent(removeStudent);
        studentList.remove(removeStudent);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String fname = firstName.getText();
        String lname = lastName.getText();
        String degree = degreeStatus.getText();
        String major = studentMajor.getText();
        
        StudentRecord addedStudent = new StudentRecord(fname, lname, degree, major);
        
        manager.addItem(fname, lname, degree, major);
        studentList.add(addedStudent);
        displayData();
        storeData();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField degreeStatus;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea display;
    private javax.swing.JTextField firstName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JButton readButton;
    private javax.swing.JTextField studentMajor;
    // End of variables declaration//GEN-END:variables

 public void displayData ()
    {
        for (int i = 0; i< studentList.size(); i++)
        {
            display.append(studentList.get(i).toString()+"\n");
        }
 }//end displayData
 
  public void storeData()
  {
      // create table in the database
      db.create();
      
      // store each Student Record in the table
      for (int i = 0; i<studentList.size(); i++){
            StudentRecord tempNode = studentList.get(i);
            db.addStudent(tempNode);

      }
    
  }//end storeData
  
  public void addData(String f){
  }
 
 
    //the method reads info from the input XML file, and then stores it in the studentArray[] 
    public void readFile(String filename){
        try{
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            builderFactory.setValidating(true);
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            Document document = builder.parse(new File(filename));
            NodeList list = document.getElementsByTagName("student");
           
            //This for loop gathers all the student attributes, puts them in a StudentRecord object
            for(int i = 0; i < list.getLength(); i++){ 
                Element element = (Element)list.item(i);
                String xmlDegreeStatus = element.getAttribute("status");
                String xmlFirstName = getFirstName(element);
                String xmlLastName = getLastName(element);
                String xmlMajor = getMajor(element);
                StudentRecord student = new StudentRecord(xmlFirstName, xmlLastName, xmlDegreeStatus, xmlMajor);

                studentList.add(student);                
            } //end for loop loading the studentArray[] with full student records
            
        }//end try block
        catch (ParserConfigurationException parserException)
        {
            parserException.printStackTrace();   
        }//end catch block
        catch (SAXException saxException)
        {
            saxException.printStackTrace();
        }//end catch block
        catch (IOException ioException)
        {
            ioException.printStackTrace();
        }//end catch block
       
    }//end readFile()

    //RETURNS THE FIRST NAME OF THE STUDENT
    public String getFirstName(Element parent){ 
        NodeList child = parent.getElementsByTagName("firstName");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getFirstName
    
   //RETURNS THE LAST NAME OF THE STUDENT    
    public String getLastName(Element parent){ 
        NodeList child = parent.getElementsByTagName("lastName");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getLastName
    
    //RETURNS THE DEGREE STATUS OF THE STUDENT    
    public String getDegreeStatus(Element parent){ 
        NodeList child = parent.getElementsByTagName("degreeStatus");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getDegreeStatus
    
//RETURNS THE MAJOR OF THE STUDENT    
    public String getMajor(Element parent){ 
        NodeList child = parent.getElementsByTagName("major");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getFirstName
}
