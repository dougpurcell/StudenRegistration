package studentregistration;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel; 
import org.jfree.chart.JFreeChart; 
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset; 
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.ui.ApplicationFrame; 
import org.jfree.ui.RefineryUtilities; 

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */ 

/**
 *
 * @author dls102
 */
public class StudentRegistration extends javax.swing.JFrame {

    Database db = new Database();
    List<StudentRecord> studentList = new LinkedList();
    
    private StudentManager manager = new StudentManager(this);
    
    public StudentRegistration() {
        initComponents();
        display.setLineWrap(true);  
        db.create();
        
        //get contents of xml file and load list
        readFile("Students.xml");
        
        for (int i = 0; i < studentList.size(); i++) {
            StudentRecord tempNode = studentList.get(i);
            db.addStudent(tempNode);
        }
        
        // display data in the text area
        displayData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        promptLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        degreeStatus = new javax.swing.JTextField();
        studentMajor = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        viewBarChart = new javax.swing.JButton();
        viewPieChart = new javax.swing.JButton();
        barChart = new javax.swing.JPanel();
        pieChart = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        promptLabel.setText("Filename:");

        nameField.setText("Students.xml");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        firstName.setText("firstName");

        lastName.setText("lastName");

        degreeStatus.setText("degreeStatus");

        studentMajor.setText("studentMajor");

        addButton.setText("Add Record");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Record");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        writeButton.setText("Write to Student Regisration XML File");
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        viewBarChart.setText("View Bar Chart");
        viewBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBarChartActionPerformed(evt);
            }
        });

        viewPieChart.setText("View Pie Chart");
        viewPieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPieChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pieChartLayout = new javax.swing.GroupLayout(pieChart);
        pieChart.setLayout(pieChartLayout);
        pieChartLayout.setHorizontalGroup(
            pieChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
        );
        pieChartLayout.setVerticalGroup(
            pieChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout barChartLayout = new javax.swing.GroupLayout(barChart);
        barChart.setLayout(barChartLayout);
        barChartLayout.setHorizontalGroup(
            barChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barChartLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        barChartLayout.setVerticalGroup(
            barChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barChartLayout.createSequentialGroup()
                .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(promptLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(191, 191, 191))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(viewBarChart)
                                        .addGap(18, 18, 18)
                                        .addComponent(viewPieChart))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(degreeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteButton)
                                    .addComponent(studentMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(writeButton))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promptLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(degreeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(deleteButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(writeButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewBarChart)
                    .addComponent(viewPieChart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(182, 182, 182))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        String fname = firstName.getText();
        String lname = lastName.getText();
        String degree = degreeStatus.getText();
        String major = studentMajor.getText();
        
        StudentRecord removeStudent = new StudentRecord(fname, lname, degree, major);
        
        manager.removeItem(fname, lname, degree, major);
        db.deleteStudent(removeStudent);
        studentList.remove(removeStudent);
        System.out.print(manager.head);
        
        displayData();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String fname = firstName.getText();
        String lname = lastName.getText();
        String degree = degreeStatus.getText();
        String major = studentMajor.getText();
        
        StudentRecord addedStudent = new StudentRecord(fname, lname, degree, major);
        
        manager.addItem(fname, lname, degree, major);
        db.addStudent(addedStudent); // adds student to database
        studentList.add(addedStudent);
        
        displayData();
    }//GEN-LAST:event_addButtonActionPerformed

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
        writeFile("Students.xml");
    }//GEN-LAST:event_writeButtonActionPerformed

    private void viewBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBarChartActionPerformed
        studentsInDegrees();
    }//GEN-LAST:event_viewBarChartActionPerformed

    private void viewPieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPieChartActionPerformed
        studentsInMajors();
    }//GEN-LAST:event_viewPieChartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel barChart;
    private javax.swing.JTextField degreeStatus;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea display;
    private javax.swing.JTextField firstName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField nameField;
    private javax.swing.JPanel pieChart;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JTextField studentMajor;
    private javax.swing.JButton viewBarChart;
    private javax.swing.JButton viewPieChart;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables

    public void displayData (){
        display.setText(""); // Clears the Text Area.
        manager.printList(display);
        
    }//end displayData

     public void storeData() {
        // create table in the database
        db.create();

        // store each Student Record in the table
        for (int i = 0; i<studentList.size(); i++){
              StudentRecord tempNode = studentList.get(i);
              db.addStudent(tempNode);
        }

    }//end storeData
  
    public void removeData() {
        db.create();

        for (int i = 0; i<studentList.size(); i++){
            StudentRecord tempNode = studentList.get(i);
            db.deleteStudent(tempNode);
        }
    }
 
    //the method reads info from the input XML file, and then stores it
    public void readFile(String filename){
        try{
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            builderFactory.setValidating(true);
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            Document document = builder.parse(new File(filename));
            NodeList list = document.getElementsByTagName("student");

            //This for loop gathers all the student attributes, puts them in a StudentRecord object
            for(int i = 0; i < list.getLength(); i++){ 
                Element element = (Element)list.item(i);
                String xmlDegreeStatus = element.getAttribute("status");
                String xmlFirstName = getFirstName(element);
                String xmlLastName = getLastName(element);
                String xmlMajor = getMajor(element);
                StudentRecord student = new StudentRecord(xmlFirstName, xmlLastName, xmlDegreeStatus, xmlMajor);
                manager.insert(student);
                studentList.add(student);                
            } //end for loop loading with full student records

        }//end try block
        catch (ParserConfigurationException parserException)
        {
            parserException.printStackTrace();   
        }//end catch block
        catch (SAXException saxException)
        {
            saxException.printStackTrace();
        }//end catch block
        catch (IOException ioException)
        {
            ioException.printStackTrace();
        }//end catch block

    }//end readFile()
    
    public void writeFile(String filename) {
        try { 
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            builderFactory.setValidating(true);
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            Document doc = builder.newDocument();
            DOMSource in = new DOMSource(doc);
            FileOutputStream xmlFile = new FileOutputStream("StudentRegistration.xml");
            StreamResult out = new StreamResult(xmlFile);
           
            Element rootElement = doc.createElement("StudentRegistrations");
            doc.appendChild(rootElement);
           
            for (int i = 0; i<studentList.size(); i++){
                           
                Element student = doc.createElement("Student");
                rootElement.appendChild(student);
                
                String fname = studentList.get(i).getFirstName();
                String lname = studentList.get(i).getLastName();
                String degree = studentList.get(i).getDegreeStatus();
                String major = studentList.get(i).getMajor();

                Element firstname = doc.createElement("FirstName");
                firstname.appendChild(doc.createTextNode(fname));
                student.appendChild(firstname);
                
                Element lastname = doc.createElement("LastName");
                lastname.appendChild(doc.createTextNode(lname));
                student.appendChild(lastname);
                
                Element degreeElement = doc.createElement("DegreeStatus");
                degreeElement.appendChild(doc.createTextNode(degree));
                student.appendChild(degreeElement);
                
                Element majorElement = doc.createElement("Major");
                majorElement.appendChild(doc.createTextNode(major));
                student.appendChild(majorElement);
            }
            
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
            transformer.transform(in, out);     
        }//end try block
        
        catch (ParserConfigurationException parserException){
            parserException.printStackTrace();   
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch block
    } // end writeFile()

    //RETURNS THE FIRST NAME OF THE STUDENT
    public String getFirstName(Element parent){ 
        NodeList child = parent.getElementsByTagName("firstName");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getFirstName
    
   //RETURNS THE LAST NAME OF THE STUDENT    
    public String getLastName(Element parent){ 
        NodeList child = parent.getElementsByTagName("lastName");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getLastName
    
    //RETURNS THE DEGREE STATUS OF THE STUDENT    
    public String getDegreeStatus(Element parent){ 
        NodeList child = parent.getElementsByTagName("degreeStatus");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getDegreeStatus
    
//RETURNS THE MAJOR OF THE STUDENT    
    public String getMajor(Element parent){ 
        NodeList child = parent.getElementsByTagName("major");
        Node childTextNode = child.item(0).getFirstChild();
        return childTextNode.getNodeValue();  
    }//end getFirstName
    
    // Calculations for Charts
    public void studentsInDegrees() {
//        System.out.println(studentList.size());
        
        int fullTime = 0;
        int partTime = 0;
        int nondegree = 0;
        int provisional = 0;
        int other = 0;
        
        for (int i = 0; i < studentList.size(); i++) {
            if (studentList.get(i).getDegreeStatus().equals("FullTime")) {
                fullTime++;
            } 
            else if (studentList.get(i).getDegreeStatus().equals("PartTime")) {
                partTime++;
            } 
            else if (studentList.get(i).getDegreeStatus().equals("NonDegree")) {
                nondegree++;
            } 
            else if (studentList.get(i).getDegreeStatus().equals("Provisional")) {
                provisional++;
            }
            else {
                other++;
            }
        }
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(fullTime, "Full Time", "Full Time");
        dataset.addValue(partTime, "Part Time", "Part Time");
        dataset.addValue(nondegree, "Non Degree", "Non Degree");
        dataset.addValue(provisional, "Provisional", "Provisional");
        dataset.addValue(other, "Other", "Other");
        
        JFreeChart chart = ChartFactory.createBarChart(
            "Students In Degrees",
            "Degrees", 
            "Students", 
            dataset, 
            PlotOrientation.VERTICAL, 
            true, true, false);
        
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension( 600 , 450 ) ); 
        
        barChart.setLayout(new java.awt.BorderLayout());
        barChart.add(chartPanel, BorderLayout.CENTER);
        barChart.validate();
        
//        System.out.println(fullTime);
//        System.out.println(partTime);
//        System.out.println(nondegree);
//        System.out.println(provisional);
//        System.out.println(other); 
    }
    
    public void studentsInMajors() {
        
        int business = 0;
        int ist = 0;
        int nursing = 0;
        int hdfs = 0;
        int other = 0;
        
        for (int i = 0; i < studentList.size(); i++) {
            if (studentList.get(i).getMajor().equals("Business")) {
                business++;
            } 
            else if (studentList.get(i).getMajor().equals("IST")) {
                ist++;
            } 
            else if (studentList.get(i).getMajor().equals("Nursing")) {
                nursing++;
            } 
            else if (studentList.get(i).getMajor().equals("HDFS")) {
                hdfs++;
            }
            else {
                other++;
            }
        }
        double bizPercent = (double)business/studentList.size();
        double istPercent = (double)ist/studentList.size();
        double nursingPercent = (double)nursing/studentList.size();
        double hdfsPercent = (double)hdfs/studentList.size();
        double otherPercent = (double)other/studentList.size();
  
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Business", bizPercent);
        dataset.setValue("IST", istPercent);
        dataset.setValue("Nursing", nursingPercent);
        dataset.setValue("HDFS", hdfsPercent);
        dataset.setValue("Other", otherPercent);
        
        JFreeChart pie = ChartFactory.createPieChart(
            "Students in Majors",
            dataset, 
            true, true, false);
        ChartPanel chartPanel = new ChartPanel(pie);
        
        pieChart.setLayout(new java.awt.BorderLayout());
        pieChart.add(chartPanel, BorderLayout.CENTER);
        pieChart.validate();
        
//        System.out.println(bizPercent);
//        System.out.println(istPercent);
//        System.out.println(nursingPercent);
//        System.out.println(hdfsPercent);
//        System.out.println(otherPercent);   
    }
}